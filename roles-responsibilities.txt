
Stakeholders
	name: Enterprise Architect (EA)
		interests	
			- Elimination & Reduction of Technical Debt
			- Enforce Enterprise Architecture (EA) Guidance, Patterns & Practice, Approved Technology Stacks, and Quality Standards
			- Ensure awareness & adherence to Compliance & Mandate
			- Mentor & Guide SDLC Stakeholders in Enterprise level interests
			- Minimize Technical Debt
				- Retiring System
				- New System
					- EA approved Technology Stack, Patterns & Practice

	name: SDLC Architect/Technical Lead
		interests
			- Alignment with EA interests
			- Alignment with Product Owner interests
			- Architecture/Design Risk Remediation
				- Working Architectural Prototype
				- Development/Integration Environments
				- Deployment Process(manual,pipeline)
				- Coding Pattern & Standards 
				- Construction Phase(s) plan with Milestones/Deliverables
		requires
			- Domain Analysis: Understanding of the business domain
				- Domain E/R analysis: entities and relationships, static & dynamic
				- Business expectations for change in near/medium term
				- Non-functional requirements
					- Scalability/Load: activity/transaction velocity, usage patterns (highs,lows: weekly,daily, hourly)
					- Extensibility: frequency that technology have to respond to changing business needs
					- 
				- Reporting & Search (not simple querying)
			
			- System Analysis
				- System Type
					- Web App (Server Render, SPA)
					- Service Api
					- Batch Job, ETL
				- Existing Architecture
					- High level architectural diagram
					- Dataflow Diagram
					- User Stories/Use Cases
					- System Type Specifics
						- Web App
							- Sitemap
							- Sitemap location to User Story/Use Case
						- Service Api
							- Endpoints
							- Allowed HttpMethods
							- Expected HttpStatus codes
							- Model Validation
							- Paging,Sorting
							- Client Expectations
			- System Architecture/Design
				- Alignment with EA Technology Stack
				- Alignment with Enterprise Governance (Compliance/Mandates,etc)
				- Alignment of System Architecture/Design with
					- non-functional requirements
					- Domain E/R analysis, particularily how are the dynamic natures of some entities and relationships handled
						- strategy patterns, provider patterns, 
						- administratively configurable management of dynamism
						- data structures optimized to handle change gracefully
						
					- SLA Metrics
						- performance, usage highs/lows
					- Cross cutting concerns
						- Health/Liveness
						- Resiliency strategies
				- Deployment process in place
					- Automated unit testing, static code analysis (quality/security)
					- Builds & depoyment to integration & Q/A 
					- Visibility of Buid deployments & communication with teams
				- Quality Measures
					- Coding Standards, Style Guides
					- Code Review Regime
			
			- Operational Environment
				- Adjacent Systems (dependency direction, Stakeholder: Adjacent System Owner)
				- Datastores
					Size, Complexity, ETL, Batch Jobs
				- Inflow/outflow of data
				- Cross-cutting Concerns
					- Caching
					- Logging (Semantic,etc)
					- Communication
						- Email
						- Notifications (Push,Dashboard,SMS)
						- Queueing, Backplane Services (Eventual Consistency,Event Sourcing)
					- Health/Wellness monitoring & reporting
					- Instrumentation
						- Performance
						- Usage: User Story/Use Case metrics
						- Resource Utilization/Starvation highs/lows
				- Security
					- Threat vectors, threat plane
					- Authentication basic/bearer token, sessions (fixed/sliding)
					- Authorization
				
	name: Product Owner
		interests
			- Identifying Stakeholders
				Architect/Technical Lead
				Domain Expert (SME)
				Enterprise Architect
				Development Team
				QA Team
				Devops Team
			- Ensure Completeness of Domain Analysis, Functional Requirements, Performance Expectations		
		requires
			- 
			
	name: Adjacent System Product Owner
		interests
			- Continuity of Service
			- Notice of Changes		
		requires
	
		
