
	Technical Debt
		System deprication
		Component deprication

	System Development
		Concept/Purpose
		Feasability/Scope/Efficacy
		Construction
		Transition
			movement to release
			stabilization/monitoring
	
	Playbook (system reincarnation)
		Id
		Name
		Motivation/Value Proposition
			Clear concise statement of motivation, purpose, expected value
		Scope (high level statement/diagram of what's in, what's out)
		StakeHolders
		
		Risk Management
			Identify Risks (NOT SDLC risks)
				Personnel
				Organizational (no team exists?)
				Business
				Cost/Time
				Complexity
			Risk Abatement
				how identified risks are to be addressed
		Transition Strategy
			- abrupt cutover, stop-start
			- gradual weaning
			- facade cutover
			- piecemeal, component by component, part by part
			- (lookup known strategies)
			Transition Plan with estimated sequence/schedule
			
		Validation
			Scope/Size/Quality threshholds, metrics (success/failure)
			Validation Plan
				what activities need to be performed
			Validation Reporting
				compare to threshholds
		Communication
			Training
				- user, admin, system training
			Transition sequence visibility & messaging
		
		
		Playbook Stages
			Inception
				Assemble System Info (original system)
					Assemble understanding of original system
				Assemble System Info (vNext system)
					Identify Stakeholders (Product Owner, Technology Leader)
					Identify Risks (organizational,team,design/architecture,scope,size,complexity)
				
				
							Identify design/architecture/platform risks (scope,size,complexity)
							Identify organizational risks
								adjacent organizations, team size/competency
							Estimate Shirtsize
							Estimate Complexity, overall & categorize(if applicable & possible)
				Determine Stakeholders (Playbook stakeholders NOT SDLC stakeholders)
					Product Owner
					Technology Leader (architect,team lead)
					[EA Architect,Mentor]
					Playbook Facilitator

				Deliverable
					Playbook Plan
						Motivation
						Scope
			
			Elaboration
				vOriginal
					finalize 
						Assemble System Info
				vNext
					finalize System Info
						Stakeholders
						Technology Stack
						Compliance & Mandates (adherence to)
						Artifacts
							Level-0 architectural design
						Compliance & Mandate
							applicability & alignment
					Refresh & Update
						Risk List
						
					Update/refresh/confirm
						Risk List	
					Address architectural/technology/platform risk
						Architectural POC (prove out design)

					Construction Planning
						Team Composition & Roles, Team competencies
						Development & Integration environments
						Quality/Validation strategy
						Construction Phases with timetables & milestone deliverables

				Stakeholder Signoffs
				Schedule commencement of next Playbook Stage
				Execute appropriate step of Communications plan
				
			Construction (of vNext)
				
				periodic review of progress by Playbook Stakeholders
					as respects Transition Execution
						update/refresh/confirm Transition Strategy
						update/refresh/confirm Transition Validation Plan
				
				test Transition Validation Plan and prove it actually works
				Schedule commencement of next Playbook Stage
				Execute appropriate step of Communications plan
				Stakeholder Signoffs
			
			Transition Execution
				repeat until complete:
					Execute Transition Plan and Validation Plan
					Monitor Transition Metrics and Validation Metrics
					Perform Transition adjustments as needed
				Aggregate metrics
				
				Stakeholder Signoffs
				Schedule commencement of next Playbook Stage
			
			Assessment
				Perform overall assessment of the performance/quality metrics of the transition
				Assemble a Lessons Learned artifact
					what went well
					what went not so well
					any plan omissions, extraneous things
					what would i do different next time
			
						
					
				
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	System Info
		Name
		Value Proposition
		Stakeholders
			Product Owner
			Technical Lead/Architect
			Champion
		Artifacts
			Level-0 Architecture
			Personas
			User Stories/Use Cases
			Deployment diagram
			...
		Service Level Agreement
		
		Scope
			size of user base
		Adjacent Concerns
			Service APIs
			Maintenance/Deployment systems/teams
			Health (SLA compliance)
		Reporting
			Periodic, Annual, AdHoc
		Security
			Authentication/Authorization
				MFA,Windows,etc
				AD Group based Auth, Custom Auth
			
		Disaster Recovery
		
		Compliance & Mandates
			DR
			Deployment (Azure Devops,MDE,etc)
			PII, HIPAA, Section 508, etc
			EA technology
				Platform, OS,  hosting (DESEI), Datastore




How to understand a System
	A System (via FeatureSet) facilitates the Actvites of Members of a Team for a business Purpose
	The non-functional aspects and Domain E/R analysis, workflows inform architecture/design of the system
		non-functional aspects inform overall architecture & design strategies
			(what aspects, examples of design decisions)
				Search (high velocity)
					Command-Query Responsibility Segregation
			high-low actvity SCALABILITY, horizontal scalability
				then solve Session issue: sticky sessions, etc, or Stateful client
			EXAMPLES NEEDED
		Domain E/R analysis
			which entities/relationships are static, which change?
			ORGANIZATION hierarchy examples
				various processing strategies, based on... preferences, env variables, time-of-day
			Handle Interests (hold,checkout, favorite, list, recommendations)
				Recommendation Engine in provider, strategy pattern
			Static Model with fast changing attributes
				book, availability (in line, queue, expire)
					eventual consistency -> message backplane to update Search
		
			what workflow activities. versions, differing behavior. plugin architecture

CASE STUDIES


VOLATILITY
	staleness of state, data.
	how often accessed, how often changed (Data,Attribute)
	how important is realtime updates?
	
	Form Entry, Process, Report?
	
	Near Realtime data access
	
	How does timeliness fit into the Domain?
	
	Cross timezones? 
	Cross language/culture/monetary?
	Globalization/Localization?
		of Data? in database?
		UX resources? messaging,
		UX responsiveness (device,LTR,RTL,Iconography,labels)
	
	
	
Retire&Replace Case Studies


Where technical debt comes from
	misaligned design/architecture
		inadequate Domain analysis (E/R), static vs dynamic
		inattention to scalability, extensibility
		design misalignment with 
	poor coding practices (not-SOLID, componentize, interfaces, refactor, unit test)
	mandate/compliance/guidance by declaration/proclamation/decision
	old technology (ASP.Net Webforms)
	poor dev team governance (code reviews, root-cause analysis, static code analysis, team education)
	
Technical Debt can be the motivation behind Retire & Replace
Replace involves Replacement SDLC, potential creation of Technical Debt

How to handle Technical Debt
	In Situ
		decouple code, make code structure more cohesive (SRP)
		
	In SDLC
	
	
		(velocity, scope, and complexity of the activities), and knowledge of static an dynamic characteristics of
	the domain inform the architecture & design of the system.


datastore
	data cleanup, refactor
	Extract, Shape, Profile, E/R with Lookup Tables

	what is the volatility of the data, data-structures
	what is the volatility of the entities, relationships, any governing Value Lists

any Approval workflows?
	what State Machine diagrams , single/multi-states
	are other processes, search, dependent upon state, next/previous state?
	
What is Volatile, what is Static

What are the Workflows? States/Transitions, collaborations, handoffs

Business Activities (Visibility into, metrics, performance, flow, scale)
	Reporting from a managerial perspective


Domain
	Discovery
		Artifacts
			Forms, Reports, Lists, Approvals, Process Flow, uploads/downloads
		System
			stages, deployment diagram
			Code
				system code
				Third Party packages (codebase)
				test cases, acceptance criteria
				configuration (ini,xml,json)
					(email server, external urls, security, authentication
					caching, stage-dependant variables, datastore connections
					secrets, dll & executable dependencies)
			
		Adjacent/External 
			Organizations, Teams, Business Partner, Supplier, Customer
			System (manual or automated)
				Website, Service API, Manual Activity
			Package/Codebase
	Analysis
		Persona[]
		Role[]
		User Story[] (as a [Persona] I want to [Do Something] so that [Motivation/Purpos]
		Workflow[]
		Authorization
			Role[]
			Role->UserStory

Effective, Resilient, Extensibility (graceful,timely response to change)
	comes from well considered alignment of Domain Analysis with 
	system architecture patterns & design
	

Importance of Naming, Namespacing, SRP
	disorganized/deceptive
		leads to no understanding, no transfer of knowledge
	good namespacing (not filesystem based)
		ability to 'hack' (as in hack restful url)
		
	deceptive naming practices 
		(impediment to understanding and transfer of knowledge)

-------------------------


1.	User Interactions with the System
2.	Adjacent Interactions with the System
3.	Dataflows within the System
4.	System Context (how the System fits in with other Systems)
	- Adjacent Systems 
5.	Domain Analysis
	- E/R Business Analysis
	- Data



GAPS
	System Replacement
		- Legacy System
			- must understand 
				business utility
					User Stories/Use Cases
				technical design
					high level architecture
					data-flows
					security
				scope of users/data/usage
				SLA
				Peer interactions/dependencies
				Retainment requirements
				

1. understand the Legacy System
	- security Auth/Auth
	- size/scope of system (users, size of data, shape of data, throughput: transactions/day-hour-etc)
	- cross-cutting concerns
		- health/liveness monitoring
		- logging (semantic, unstructured)
		- caching
	- adjacent systems (api,etl,import/export)
	- stakeholders (product owner, technology lead, business sme)
2. determine scope of what is to be carried forward
3. ascertain mandates/compliance concerns
4. replacement inception/elaboration
	- design Replacement System
	- Remediate risks (technical, organizational)
	- Prepare the DEV & Testing environments/platforms
	- Assemble the full Team (technical lead, product owner, already in place) testers, developers, devops support
5. Playbook 
	- Stakeholders
		- Product Owner, Technology Lead, EA Advisor, Playbook Facilitator, Validation Manager
	- Transition Plan
		- determine scope, nature of transitions
			- Data Transition
			- User Transition
			- Adjacent System cutover (versioning)
		- select strategies for each transitions
	- Verify & Validation
		- come up with validation strategy, process, reporting mechanisms
		- author sucess/failure threshholds
	

	Planning & Analysis
	Define Requirements
	Design
	Development
	Testing
	Deployment
	Maintenance

Application SDLC
	Inception
	Elaboration
	Construction
	Transition
	

Whether or Not to adopt NEW TECHNOLOGY
	Ideation
	Incubation
	Pilot
	Adoption



Project Management
	Initiation
	Planning
	Execution
	Monitor & Controls
	Closure

Project Management Stages are the root of all lifecycles
	Define what is to be done (in/out scope)
	why it is to be done (purpose, Value Prop), 
	who is to do it
	identify risks
	identify constraints
	what is success/failure

Application/System Lifecycle



	







In the beginning there was Project Management, 
	Then there was Application SDLC




Reasons for EOL
	Decision to start from scratch
	Poor product performance
	Shift in focus from outdated to recent products/technology

EOL Risks
	Compromised security (patches, bug fixes, security upgrades no longer available)
	Increased Maintenance Costs
		Support for EOL software is expensive
		Cost of additional downtime high due to no technical support
		Increased labor costs due to lack of skills availability
	Lack of technical support
		Slower response time
		Outdated user manuals
		Incomplete API and other documentation
		Lack of community support, forums for troubleshooting
		Lack of remote assistance or escalation process for complex problems
	Compliance challenges
		HIPAA, GDPR, PCI DSS, SOX Act, MFA
	Incompatibility with current solutions

Solutions
	Monitor EOL status
		what it does, its operation, its dependencies
		how to keep it running when support has ended
		NO MORE SLA
	Isolate it from the network
		restrict access (reduce attack surface)
		limit entry/exit points (control inbound/outbound traffic)
		Identify which software needs isolation
		separate physical network segments or use virtual local area networks(VLAN)
		Configure firewalls
	Prevent technical debt snowball
		Custom Software
		COTS (version)
		COTS+ (local customization)
		- developer shortages
		- inadequate QA testing
		- lack of documentation
		- budget limitations
		
		1. Identify most critical codebase areas that increase maintenance costs
		2. Improve efficiency of codebase by restructuring, componentizing
		3. Invest in automated testing
		4. Replace outdated components or libraries
		5. Maintain proper documentation
	
	Implement Compatibility testing
		Define set of environments/platforms on which the solution must function
		Understand expected behavior under different configurations
		Setup proper testing environment using different platforms, devices, or networks to test compatibility of solution under different configurations
		record bugs, fix defects, then retest until solved
	Consider cloud migration



------------------------------------------------

Create inventory of all software used
	include Platform, architecture-pattern, dependencies: datastore & 3rd party technology libraries
	technology stack
	licenses
		Software Name, Version, License Type, #Licenses, Expiration Date
		
	certificates
	MDE compliance?
	
	VALIDATE & AUDIT the inventory
	REVIEW Licenses
	
	
EXPORT Legacy Data and deinstall EOL software
	bak,json,xml,csv,pdf,ascii


Migration Strategies
	-	Upgrade to newer version
	-	Replace with different product
	-	Implement Compensating Controls
			-	security monitoring
			-	incident response plan

Risk Assessment
Communication Plan
	
	
Inception
	System Info
		Assemble Legacy System Info (Adjacent Systems, Scope of effort, SME)
		Assemble Legacy System Info (Stakeholders,Risks)
	Identify Mandates & EA Recommendations
	Identify Playbook Stakeholders
	Identify Risks
		Playbook risks
		Transition Risks
	Estimate
		Overall complexity, 
Elaboration



System
	SystemInfo
		Id
		Name
		Owner
	ValueProposition
	Stakeholders
	ProductInfo
		id
		Name
			Stage (current: )
		Owner
	SLA
	Technology
		Compliance & Mandates
			Security
			Accessibility
			Technology
				Platform(s)
				Datastore(s)
				OS
		TechnologyStack
			Platform
		Design
			Description (narrative)
			Artifacts
				Dataflow
				Persona[]
				Requirements
					Nonfunctional
					Functional
			Security
				Authentication
				Authorization
		DisasterRecovery
			Strategy
		Dependency[]
			AdjacentSystem[]
				Name
				Type {Service API, Datastore, MF, BatchJob}
			Package[]
			License[]
		Feature[]
			Persona[]
			UserStory[]


-----------------------

Product Portfolio

Product Lifecycle Management

Project Lifecycle Management

Application Lifecycle Management

Asset Lifecycle

Project		Initiation		Planning		Execution		Closure
Asset		Design			Commission		Operation		Decommission
Product		Introduction	Growth			Maturity		Decline



	-	Create Application Inventory
			- Name
			- Owner
			- Technology Stack
				- Platform[]
				- Datastore
				- Server
				- Code[]
				- Adjacencies[]
			- Value Proposition
			- Lifespan
			- Stakeholders
			- Solution/System
				- Dependencies
					- Certificates
					- Licenses
					- 3rd Party Software/Libraries
					- External Services, Jobs
				- Compliance
					- MDE mandates
				- Data
					Datastore[]
			- SLA
			- Mandates & Compliance
				- MFA
				- MDE
			- FeatureSet
				- Core Competency of the solution
					- still needed?
				- Overlaps with other solutions?
			- Deltas
				- Platform
				- Security
				- Organization
				- LOB
				- Environment
					- Social
					- Political
					- Industry
					- Technology
				
			- Design/Architecture
				- Scope
				- Dataflow, Context
				- Level-0 Entity-Releationship
				- User Story[]
				- Non-Functional requirements
			- Security
				- Authentication
					isMFA?
				- Auth 
			- Personas

Solution Assessment
	Reliability
	Maintainability
	Securability
	Does it meet, fall short, or exceed envisioned utility?
		Is the envisioned utility still needed by business?
	Can it be replaced?
	Does another solution approach providing approximate utility?
	Could it simply be euthanized?

--------------------------

DON'T PANIC
DON'T JUMP TO SOLUTIONS

Nine Tenths of the cost of software solutions is in mainentance and modification, so do NOT shortcut solid understanding, process, design

What are we trying to do
who are we doing this for
How big and complex is this
Who will it affect
Who is going to pay, and how much


Who knows about this stuff
Who knows how to design/build this
What is the timeline
What are the Risks
What is the Plan to do this
What are the metrics/thresholds to measure progress & success/failure


must haves
	Domain Context
		shows Adjacent Systems, dataflows in/out
	Dataflows
		shows how data moves around the system
	Datastore
		Data Definitions
		RMDBS,Document,Key-Value,Graph
		Datastore E/R diagram
		Size,Shape,Scale,Profile
		Redundancy,DR
		Consistency (Eventual,Current,etc)
	Personas
		Roles, Purpose, Expectations
	Domain Analysis
		Domain E/R analysis
		Workflow analysis
	Cross-cutting Concerns (CCC)
		Logging
			forensic (semantic for troubleshooting)
			performance ( resource usage, action profiling, SLA reporting)
	Mandates/Compliance
		Security
			System Authorization
			Code Quality Thresholds, Third-Party Packages
		Technology Stack
		Patterns & Practices (ITIL,Agile,Devops,CI-CD,Config-Mgt,Api-First,etc)
		Legal [I18n,Section508,PPI]
	Design
		[CRUD,Command-Query,Queue,Search,Event-Source]
		Monolith,Componentized Monolith, Microservices, Gateway Api
	Service Level Agreement
		Health/Liveness Monitoring
		Exceptional Event Reporting
	Security
		Authentication
		Authorization
	Resiliency
		Retry,Fallback
	Repo
		
	Stages
		
	Delivery
		Manual, Automated

Begin
	- Who
		Owner
		Domain Expert
		Design Expert Architect
	- What is the proposed value and purpose
	- What is the Importance/Urgency of the Project
	- What is the Size of the proposed effort? (high level)
	- Go-no-Go Signoffs

Plan
	- Discovery
		Understand existing solution (manual or technological)
		(how was it done in the past, shortcomings/dashed-hopes/brilliant-successes)
	- Scope
		What to maintain, 
		What are we hoping to improve? 
		What can we leave behind
		What other systems do we depend upon, depend upon us?
	- Mandates & Compliance
		what must we comply with legally, and organizationally (company, department, team)
	- Risks
		What threats or uncertainties exist?
		How can we remediate critical risks?
	- Prepare for executing the main Work Effort
		- Team, Roles, Members
		- Environments
			working, integration, QA (UAT,Staging,Production)
		- Sprints
			Deliverables,Milestones
		- Delivery Pipeline
			Build, Test, Validate
			Setup Configurement Management

	- Go-no-Go Signoffs

Work Effort Execution (Construction)
	Execute work, Sprint by Sprint, measuring progress, quality metrics
	Adjust, update Risk List as appropriate
	Report progress, metrics, deliverables & milestones to Stakeholders
	As code is delivered to QA stage, test results are fed back to developers






EVERY SDLC is a Retire & Replace process
	prior system, prior manual activity.
	
	
	how to startup or transition into the solution, maintaining quality and consistency, with the least friction
	never startup, even if all workflows were manual, if manual, there will be import, scan, transform, etl, etc.

Hitchhikers Guide to Software Development


1.	Designing, Constructing, Deploying, Maintaining, Modifying a software solution is a complex endeavor.
		Organizational complexities
		Domain complexities
		Technology Risks
		Domain Analysis inadequacies
		
2.	Building a software solution from scratch, without a pre-existing solution is rare.

3.	Domain Analysis often falls short, leading to 
		- designs that are brittle where business is dynamic, and dynamic where business is static, which greatly increases the cost of future modifications to accommodate changing business needs
		- ad hoc approach to system/component design, increased coupling and less cohesion.
		
4.	Governance, Style, Conventions
		Adherence to consistently styled conventions and styles increases development velocity through
		familiarity and semantically meaningful & self-documenting code.
		
5.	Cross-cutting concerns often are an afterthought
		these concerns greatly impact the maintenance, performance-at-scale, forensic-troubleshooting
		Non-functional aspects of the system.
			Logging
			Caching
			Messaging
6.	Security

7.	Deployment chain (CI, CICD, CD) often the last consideration
		results in QA, UAT bottlenecks
		"works on my machine" syndrome
		integration gaps
		"hurry up and wait" development/integration
8.	Configuration Management
		Stage specific variation
		Secrets management
		
9.	Transition Consistency, V&V

10.	Reporting (afterthought)
		SLA
		Aggregates
		Special Events
		Threat Warning

11.	Adjacency Concerns
		Adjacent Systems (Dependent, Depends Upon)
		Enlistment, Visibility, Governance (throttling,cost-allocation,etc)
		Input/Output Dataflows


most critical is the feedback loop, requirement->design->construct->test->user-acceptance LOOP
	anything that is a load on this loop has a compounding drag effect


Hitchhikers Guide to the Project

define the SDLC
	understand the domain
		domain analysis
			E/R (business)
			E/R (datastore)
			Personas
			Workflows
		domain context
			dataflows
			adjacent systems, input/output dataflows






Hitchhikers Guide to Web Application

	Type: Server Render, Single Page App
			Request/Response, WebSockets bi-directional
			xml,json,other
	Workflows
		categorized by criticality (scale: 1-5)
		categorized by frequency of use
	Sitemap
		Pages
		page->workflow
		aggregation->dashboard pages
	Roles
		Admin,SuperAdmin,User,etc
	Authentication
		Windows Authentication
		MFA
		username/password
		social media
	Authorization
		Session Management: Sliding, Absolute, etc
		Groups
		Permissions
			Grant/Deny
	
	Input/Output
		Uploads/Downloads
			categorized: domain, mime
			uploads sanitation (quarantene, inspection, transformation,etc)
		Form Entry
			simple form
			wizard form
		Reports
			categorized: domain, mime
	Indeterminate Processing
	
	Messaging
		Liveness: Push/Pull (websockets,polling)

	
	Globalization/Localization
	
	Personalization
	
	UX Style Guide
	
	Linter
	
	Maintenance
	




Hitchhikers Guide to the Service Api


Hitchhikers Guide to ETL, Batch process

------------------------------

Software Development

	SystemInfo
		Name
		Value Proposition
		Stakeholders (role names & members)
		Architecture & Design Artifacts
			High-level Artifact (pictoral,narrative...)
			Dataflows
			Deployment (servers, F5, Caching, etc)
			...
		Service Level Agreement
		Security
			Authentication
			Authorization
		Dependencies
			Adjacent Systems (both dependant and depends upon)
			Third Party Software, Codebases, Packages
			Licenses
		Technology Stack
			Third Party Software, Codebases
			Datastores
			Servers physical/virtual, linux/windows
		Requirements
			Non-functional
			Functional
		Personas
		Deployment
			Manual/Pipeline
		Configuration Management
			Filesystem/API/Datastore based
		Mandates & Compliance
			Security: MFA,...
			Assessibility: Section 508,...
			Deployment: MDE, Azure Devops,...
		Disaster Recovery





	Solution
		Architecture
			Design
			Patterns & Practices
			Artifacts
				
		Platform
			OS
			Networking/Groups/Cloud
		Datastore[]
		Processes
			ETL
			BatchProcesses
			Import/Export
		Reporting
			AdHoc
			Periodic [daily,monthly,quarterly,yearly]
		CrossCutting
			Logging
				Semantic, forensics
			Performance Metrics
				Monitoring (aggregations)
				Forensics
			Health/Liveness Monitoring
			Caching
			Communication
				Messaging
				Email
				Notifications, Push/Pull
				Dashboards,
				Subscriptions
			Queue Messaging (eventual consistency)
			Search/Indexing
			Asset storage & Quarantene
				artifacts,images,etc


	Website
		Sitemap
			UserStory->Page Mapping
		UX Guidance
		Maintenance
		Personalization
		
	
	
	Service API
		Security
			Bearer|Basic token, Windows, None
		Versioning
			Strategy
		Url Strategy
			Restful Taxonomy
			RPC,
			AdHoc
		Endpoints
			Path/Pattern
			HttpMethod(s)
			DataContract
				Input/Output
			Validation
				Messaging
		HttpMethods (allowed)
		HttpStatus (expected)
		Api SLA
			monitoring
			throttling
		Resilience
			Fault handling
				Retry 
					until-success
					wait-retry 
					wait-retry-until-success
					circuit-breaker
					fallback
			
		
	Datastore
		DataDictionary
		Design
			physical
			logical
			conceptual
			E/R diagram, mapping
		Groups/Tables/Collections
			Lookup Tables
			Audit
			Reporting
		Throughput
			Transaction velocity
		Resiliency
			Synchronization
			Backups
			Disaster Recovery


Create a System Inventory
	Name
	Owner
	Technology Stack[]
		Technology: "name,identifier"
			LifecycleStage :
				Emerging: [Incubation/POC- | Trailblazor/Pilot]
				Mature: [Target|Contained]
				Legacy: [Deprecated | Retired]
			ref: https://confluence.aci.is.cl.ssa.gov/display/ENTARC/Reference+Architecture+Portal#ReferenceArchitecturePortal-TheReferenceArchitecture


An exercise to test if a specific idea or assumption meets a stated need

----------------------------------------

Project Management
	Name
	Value Proposition
	Stakeholders
	Scope
	Conditions/Domain Survey
	Feasibility
	Cost Estimate (sizing)
	Vision
	
	Risks/Risk Remediation
	Constraints (Mandates,Compliance,etc)
	Timeline
	Execution Plan
		Steps, Schedule, Milestones
	Quality
		Success/failure metrics & thresholds
	Deliver Plan
	
	Execution
		progress & quality metrics
		risk-remediation
		adjustment of estimates,risk,design
--------------------------------------

